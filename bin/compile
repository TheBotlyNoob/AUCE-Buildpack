#!/bin/sh

set -eu

indent() {
  sed -u 's/^/       /'
}

export_env_dir() {
  env_dir=$1
  whitelist_regex=${2:-''}
  blacklist_regex=${3:-'^(PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH|JAVA_OPTS)$'}
  if [ -d "$env_dir" ]; then
    for e in $(ls $env_dir); do
      echo "$e" | grep -E "$whitelist_regex" | grep -qvE "$blacklist_regex" &&
      export "$e=$(cat $env_dir/$e)"
      :
    done
  fi
}

BP_DIR="$(cd "$(dirname "$0")" && pwd)"
BUILD_DIR=$1
CACHE_DIR=$2
OPT_DIR=$BP_DIR/../opt/

export_env_dir $3

if [ ! -f $BUILD_DIR/Impostor.Server.exe ]; then
  echo "Installing The Impostor Server"
  curl -L --silent https://github.com/TheBotlyNoob/AUCE-Buildpack/releases/latest/download/NewServer.tar.gz | tar -xz --strip-components=1 
  elif [ -z "$NGROK_API_TOKEN" ]; then
  echo "You Must Set The NGROK_API_TOKEN Config Var To Create A TCP Tunnel!"
  exit 1
fi

# ------------------------------------ WINE -----------------------------------------------------
echo "-----> Installing wine 1.6.2"

VENDOR_DIR="vendor"
DOWNLOAD_URL="https://github.com/iScribes/heroku-buildpack-wine/releases/download/1.6/wine1.6.tar.gz"

echo "DOWNLOAD_URL = " $DOWNLOAD_URL | indent

cd $BUILD_DIR
mkdir -p $VENDOR_DIR
cd $VENDOR_DIR
mkdir -p wine
cd wine

echo "-----> Downloading and extracting from " $DOWNLOAD_URL
curl -L --silent $DOWNLOAD_URL | tar -xz --strip-components=1

echo "-----> Exporting PATH"
PROFILE_PATH="$BUILD_DIR/.profile.d/wine.sh"
mkdir -p $(dirname $PROFILE_PATH)      
echo 'export PATH="$PATH:${HOME}/vendor/wine/bin"' >> $PROFILE_PATH

# ---------------------------------------------------- SERVER ------------------------------------------------

APT_CACHE_DIR="$CACHE_DIR/apt/cache"
APT_STATE_DIR="$CACHE_DIR/apt/state"
APT_OPTIONS="-o debug::nolocking=true -o dir::cache=$APT_CACHE_DIR -o dir::state=$APT_STATE_DIR"

mkdir -p "$APT_CACHE_DIR/archives/partial"
mkdir -p "$APT_STATE_DIR/lists/partial"

echo "-----> Installing screen and xvfb... "
apt-get $APT_OPTIONS update -y | indent
apt-get $APT_OPTIONS -y --allow-downgrades --allow-remove-essential --allow-change-held-packages -d install --reinstall screen xvfb libnotify4 | indent
mkdir -p $BUILD_DIR/.apt/var/run/screen

mkdir -p $BUILD_DIR/.profile.d
cat <<EOF >$BUILD_DIR/.profile.d/000_apt.sh
export PATH="\$HOME/.apt/usr/bin:\$PATH"
export LD_LIBRARY_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu:\$HOME/.apt/usr/lib/i386-linux-gnu:\$HOME/.apt/usr/lib:\$LD_LIBRARY_PATH"
export LIBRARY_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu:\$HOME/.apt/usr/lib/i386-linux-gnu:\$HOME/.apt/usr/lib:\$LIBRARY_PATH"
export INCLUDE_PATH="\$HOME/.apt/usr/include:\$INCLUDE_PATH"
export CPATH="\$INCLUDE_PATH"
export CPPPATH="\$INCLUDE_PATH"
export PKG_CONFIG_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu/pkgconfig:\$HOME/.apt/usr/lib/i386-linux-gnu/pkgconfig:\$HOME/.apt/usr/lib/pkgconfig:\$PKG_CONFIG_PATH"
export PYTHONPATH="\$HOME/.apt/usr/lib/python2.7/dist-packages"
export SCREENDIR="\$HOME/.apt/var/run/screen"
export BUILD_DIR=$BUILD_DIR
EOF

for DEB in $(ls -1 $APT_CACHE_DIR/archives/*.deb); do
  dpkg -x $DEB $BUILD_DIR/.apt/
done

ln -s /app/.apt/usr/bin "$BUILD_DIR/xub"
# Fix xkbcomp path by rewriting Xvfb binary.
sed -i s:/usr/bin:/app/xub: "$BUILD_DIR/.apt/usr/bin/Xvfb"

echo -n "-----> Installing ngrok... "
curl --silent -o ngrok.zip -L "https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip" | indent
unzip ngrok.zip -d $BUILD_DIR/bin > /dev/null 2>&1
echo "done"

mkdir -p $BUILD_DIR/bin
[ ! -f $BUILD_DIR/au-server ] && cp $OPT_DIR/au-server $BUILD_DIR/bin
[ ! -f $BUILD_DIR/index.rhtml ] && cp $OPT_DIR/index.rhtml $BUILD_DIR

chmod +x $BUILD_DIR/bin/au-server
